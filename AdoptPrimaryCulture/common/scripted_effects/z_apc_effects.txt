#-----------------------------------------------------------------------------------------
# Alternative set_primary_culture_cleanup_effect
# Long explanations lest I forget everything
#-----------------------------------------------------------------------------------------
z_apc_set_primary_culture_effect = {
	#-----------------------------------------------------------------------------------------
	# First of all, we need to save a number of *culture* and *country_culture* scopes.
	# But we want to be able to use these scopes after the effect has ended, so we use variables instead.
	#-----------------------------------------------------------------------------------------
	# Let's start with our current primary culture, the one we're about to replace.
	random_owned_province = {
		limit = {
			any_pops_in_province = { this.country_culture = root.country_culture }
		}
		random_pops_in_province = {
			limit = { this.country_culture = root.country_culture }
			this.culture = {
				root = {
					set_variable = {
						name = z_apc_old_primary_pop_culture # Old culture
						value = prev
					}
				}
			}
			this.country_culture = {
				root = {
					set_variable = {
						name = z_apc_old_primary_culture # Old country culture
						value = prev
					}
				}
			}
		}
	}
	# We do the same for the new primary culture.
	random_owned_province = {
		limit = {
			any_pops_in_province = {
				this.country_culture = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				NOT = { this.country_culture = root.country_culture } # Just to make sure
			}
		}
		random_pops_in_province = {
			limit = {
				this.country_culture = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				NOT = { this.country_culture = root.country_culture }
			}
			this.culture = {
				root = {
					set_variable = {
						name = z_apc_new_primary_pop_culture # New culture
						value = prev
					}
				}
			}
			this.country_culture = {
				root = {
					set_variable = {
						name = z_apc_new_primary_culture # New country culture
						value = prev
					}
				}
			}
		}
	}
	# We do the same for a third culture that doesn't currently exist in root.
	# The reason why will be explained later.
	set_variable = {
		name = z_apc_temporary_culture # Temporary culture
		value = var:z_apc_old_primary_culture
	}
	while = {
		limit = {
			any_country_culture = {
				this = root.var:z_apc_temporary_culture
			}
		}
		random_country = {
			random_country_culture = { save_scope_as = z_apc_temporary_culture }
			random_owned_province = {
				limit = {
					any_pops_in_province = { this.country_culture = scope:z_apc_temporary_culture }
				}
				random_pops_in_province = {
					limit = { this.country_culture = scope:z_apc_temporary_culture }
					this.culture = {
						root = {
							set_variable = {
								name = z_apc_temporary_pop_culture # Temporary culture
								value = prev
							}
						}
					}
					this.country_culture = {
						root = {
							set_variable = {
								name = z_apc_temporary_culture # Temporary country culture
								value = prev
							}
						}
					}
				}
			}
		}
	}
	set_variable = {
		name = z_apc_set_primary_culture
		value = $MAKE_OLD_CULTURE_INTEGRATED$
	}
	#-----------------------------------------------------------------------------------------
	# Before we continue, we make sure that all our variables are set.
	#-----------------------------------------------------------------------------------------
	if = {
		limit = {
			has_variable = z_apc_old_primary_pop_culture # Old culture
			has_variable = z_apc_old_primary_culture # Old country culture
			has_variable = z_apc_new_primary_pop_culture # New culture
			has_variable = z_apc_new_primary_culture # New country culture
			has_variable = z_apc_temporary_pop_culture # Temporary culture
			has_variable = z_apc_temporary_culture # Temporary culture
			has_variable = z_apc_set_primary_culture # Old culture intregration flag
		}
		# If so, we can change culture using the Vanilla/Invictus effect that cleans up everything as needed
		set_primary_culture_cleanup_effect = {
			NEW_PRIMARY_CULTURE = root.var:z_apc_new_primary_pop_culture # New culture
			MAKE_OLD_CULTURE_INTEGRATED = yes # We'll change it later based on var:z_apc_set_primary_culture
		}
		# Unfortunately, we're not done yet.
		# The problem, when changing the primary culture, is that the game fails to recalculate the correct amount of noble cultures, resulting in a malus to the new primary culture.
		# Therefore, we need to force a recalculation. To do that, we'll convert all pops from the old primary culture to another one, then we'll convert them back.
		# However, the pop count will only update after the next monthly tick, so we set up a flag for this and wait.
		#trigger_event = z_apc_common.998
		if = {
			limit = {
				has_variable = z_apc_old_primary_pop_culture # Old culture
				has_variable = z_apc_old_primary_culture # Old country culture
				has_variable = z_apc_new_primary_pop_culture # New culture
				has_variable = z_apc_new_primary_culture # New country culture
				has_variable = z_apc_temporary_pop_culture # Temporary culture
				has_variable = z_apc_temporary_culture # Temporary culture
				has_variable = z_apc_set_primary_culture # Old culture intregration flag
			}
			every_owned_province = {
				every_pops_in_province = {
					limit = {
						pop_culture = root.var:z_apc_old_primary_pop_culture
					}
					set_pop_culture = root.var:z_apc_temporary_pop_culture
				}
			}
		}
		root.country_culture = {
			save_scope_as = z_apc_temporary_culture_2
		}
		while = {
			limit = {
				any_country_culture = {
					this = scope:z_apc_temporary_culture_2
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					war = no
					num_of_cities > 1
				}
				random_country_culture = { save_scope_as = z_apc_temporary_culture_2 }
				save_scope_as = z_apc_temporary_province_original_owner
			}
		}
		scope:z_apc_temporary_province_original_owner = {
			random_owned_province = {
				limit = {
					NOT = {
						this = prev.capital_scope
					}
				}
				set_owned_by = root
				set_owned_by = prev
			}
		}
		if = {
			limit = {
				has_variable = z_apc_old_primary_pop_culture # Old culture
				has_variable = z_apc_old_primary_culture # Old country culture
				has_variable = z_apc_new_primary_pop_culture # New culture
				has_variable = z_apc_new_primary_culture # New country culture
				has_variable = z_apc_temporary_pop_culture # Temporary culture
				has_variable = z_apc_temporary_culture # Temporary culture
				has_variable = z_apc_set_primary_culture # Old culture intregration flag
			}
			every_owned_province = {
				every_pops_in_province = {
					limit = {
						pop_culture = root.var:z_apc_temporary_pop_culture
					}
					set_pop_culture = root.var:z_apc_old_primary_pop_culture
				}
			}
		}
		root.country_culture = {
			save_scope_as = z_apc_temporary_culture_2
		}
		while = {
			limit = {
				any_country_culture = {
					this = scope:z_apc_temporary_culture_2
				}
			}
			random_country = {
				limit = {
					is_ai = yes
					war = no
					num_of_cities > 1
				}
				random_country_culture = { save_scope_as = z_apc_temporary_culture_2 }
				save_scope_as = z_apc_temporary_province_original_owner
			}
		}
		scope:z_apc_temporary_province_original_owner = {
			random_owned_province = {
				limit = {
					NOT = {
						this = prev.capital_scope
					}
				}
				set_owned_by = root
				set_owned_by = prev
			}
		}
	}
	else = {
		# Abort
	}
}

#-----------------------------------------------------------------------------------------
# Find a Cultural Majority, then update Cultural Majority or remove invalid Cultural Majority
#-----------------------------------------------------------------------------------------
z_apc_find_cultural_majority_effect = {
	# Before anything, make sure the primary culture isn't considered a Cultural Majority
	if = {
		limit = {
			root.country_culture = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
		}
		root.country_culture = { z_apc_remove_all_cultural_majority_modifiers_effect = yes }
	}
	# ...and make sure the old primary culture isn't considered a Ruling Minority
	if = {
		limit = {
			any_country_culture = {
				NOT = { this = root.country_culture }
				has_country_culture_modifier = z_apc_ruling_minority
			}
		}
		every_country_culture = {
			limit = {
				NOT = { this = root.country_culture }
				has_country_culture_modifier = z_apc_ruling_minority
			}
			remove_country_culture_modifier = z_apc_ruling_minority
		}
	}
	# Then, check whether a Cultural Majority exists
	if = {
		limit = {
			# Only possible if the APC mission is not ongoing or has never been completed
			NOT = { has_variable = z_apc_mission_ongoing }
			# Only possible if there's any culture other than the primary one
			any_country_culture = {
				NOT = { this = root.country_culture }
			}
		}
		# ---------------------------------------------------------------------------------------------------------------
		# Try to find a Cultural Majority in the entire COUNTRY
		if = {
			limit = { num_of_cities > 1 } # Only valid is capital_scope isn't the only owned territory
			z_apc_find_cultural_majority_in_zone_effect = { ZONE = country }
		}
		# If no Cultural Majority was found in the COUNTRY, try to find one in the capital REGION
		if = {
			limit = {
				NOT = {
					exists = scope:z_apc_found_cultural_majority_in_country
				}
			}
			if = {
				limit = { num_of_cities > 1 } # Only valid is capital_scope isn't the only owned territory
				z_apc_find_cultural_majority_in_zone_effect = { ZONE = capital_region }
			}
		}
		# If no Cultural Majority was found in the capital REGION, try to find one in the capital AREA
		if = {
			limit = {
				NOR = {
					exists = scope:z_apc_found_cultural_majority_in_country
					exists = scope:z_apc_found_cultural_majority_in_capital_region
				}
			}
			if = {
				limit = { num_of_cities > 1 } # Only valid is capital_scope isn't the only owned territory
				z_apc_find_cultural_majority_in_zone_effect = { ZONE = capital_area }
			}
		}
		# If no Cultural Majority was found in the capital AREA, try to find one in the capital CITY
		if = {
			limit = {
				NOR = {
					exists = scope:z_apc_found_cultural_majority_in_country
					exists = scope:z_apc_found_cultural_majority_in_capital_region
					exists = scope:z_apc_found_cultural_majority_in_capital_area
				}
			}
			z_apc_find_cultural_majority_in_zone_effect = { ZONE = capital_city }
		}
		# ---------------------------------------------------------------------------------------------------------------
		z_apc_update_cultural_majority_effect = yes # Fire events based on scenario
	}
}

#-----------------------------------------------------------------------------------------
# Find the culture that has the most pops in the designated ZONE, then check if it's a Cultural Majority
#-----------------------------------------------------------------------------------------
z_apc_find_cultural_majority_in_zone_effect = {
	# Make a list of all cultures that need to be compared
	every_country_culture = {
		limit = {
			NOT = { this = root.country_culture }
		}
		add_to_list = z_apc_comparison_cultures_list
	}
	# Pick one at random to be the first culture to be compared
	random_country_culture = {
		limit = {
			is_in_list = z_apc_comparison_cultures_list
		}
		# ...save it as culture_A, which is assumed to have the most pops in the designated ZONE
		save_scope_as = z_apc_culture_A
		# ...remove it from the list of cultures to be compared...
		remove_from_list = z_apc_comparison_cultures_list
		# ...and store population in cache
		root = {
			set_variable = {
				name = z_apc_culture_A_$ZONE$_population_cache
				value = z_apc_culture_A_$ZONE$_population
			}
		}
	}
	# Among all the cultures in the list, find the one that has the most pops in the designated ZONE
	while = {
		# Run loop as long as there are cultures to be compared
		limit = {
			any_country_culture = {
				is_in_list = z_apc_comparison_cultures_list
			}
		}
		# Pick one at random...
		random_country_culture = {											
			limit = {
				is_in_list = z_apc_comparison_cultures_list
			}
			# ...save it as culture_B...
			save_scope_as = z_apc_culture_B
			# ...remove it from the list of cultures to be compared...
			remove_from_list = z_apc_comparison_cultures_list
			# ...and store population in cache
			root = {
				set_variable = {
					name = z_apc_culture_B_$ZONE$_population_cache
					value = z_apc_culture_B_$ZONE$_population
				}
			}
			# Now compare culture_A and culture_B in the designated ZONE
			if = {
				limit = {
					root = { z_apc_culture_A_$ZONE$_population_cache < z_apc_culture_B_$ZONE$_population_cache }
				}
				# If culture_B > culture_A in the designated ZONE, update cache for culture_A...
				root = {
					set_variable = {
						name = z_apc_culture_A_$ZONE$_population_cache
						value = var:z_apc_culture_B_$ZONE$_population_cache
					}
				}
				# ...then culture_B becomes the new culture_A
				scope:z_apc_culture_B = {
					save_scope_as = z_apc_culture_A
				}
			}
			# Clear cache for culture_B
			root = { remove_variable = z_apc_culture_B_$ZONE$_population_cache }
		}
	}
	# At this point, culture_A is the one that has the most pops in the designated ZONE
	# So the next step is to check whether culture_A is a Cultural Majority (i.e. if it's above the set threshold for the designated ZONE)
	set_variable = {
		name = z_apc_total_population_in_$ZONE$_cache
		value = z_apc_total_population_in_$ZONE$
	}
	if = {
		limit = {
			z_apc_culture_pc_$ZONE$ > z_apc_cultural_majority_threshold_$ZONE$
		}
		scope:z_apc_culture_A = {
			save_scope_as = z_apc_found_cultural_majority
			save_scope_as = z_apc_found_cultural_majority_in_$ZONE$
		}
	}
	# Clear list
	every_in_list = {
		list = z_apc_comparison_cultures_list
		remove_from_list = z_apc_comparison_cultures_list
	}
	# Clear cache for culture_A
	remove_variable = z_apc_culture_A_$ZONE$_population_cache
	# Clear cache for ZONE
	remove_variable = z_apc_total_population_in_$ZONE$_cache
}

#-----------------------------------------------------------------------------------------
# Update Cultural Majority modifier based on all possible scenarios
#-----------------------------------------------------------------------------------------
z_apc_update_cultural_majority_effect = {
	# No Cultural Majority was found...
	if = {
		limit = {
			NOT = { exists = scope:z_apc_found_cultural_majority }
		}
		# ...and no Cultural Majority already exists
		if = {
			limit = {
				NOT = {
					any_country_culture = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				}
			}
			# SCENARIO 0: Do nothing
		}
		# ...but a Cultural Majority already exists
		else = {
			# SCENARIO 1: Remove Cultural Majority modifier from the old Cultural Majority
			# Event
			random_country_culture = {
				limit = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				save_scope_as = z_apc_old_cultural_majority
			}
			random_country_culture = {
				limit = { this = root.country_culture }
				save_scope_as = z_apc_ruling_minority
			}
			trigger_event = z_apc_common.1
		}
	}
	# A Cultural Majority was found...
	else = {
		# ...and no Cultural Majority already exists
		if = {
			limit = {
				NOT = {
					any_country_culture = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				}
			}
			# SCENARIO 2: Add Cultural Majority modifier to the new Cultural Majority (also game start scenario)
			# Event
			random_country_culture = {
				limit = { this = root.country_culture }
				save_scope_as = z_apc_ruling_minority
			}
			trigger_event = z_apc_common.2
		}
		# ...and it's already a Cultural Majority
		else_if = {
			limit = {
				scope:z_apc_found_cultural_majority = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
			}
			# SCENARIO 3: Update Cultural Majority modifier, if necessary (no event)
			# Event
			scope:z_apc_found_cultural_majority = {
				z_apc_remove_all_cultural_majority_modifiers_effect = yes
				z_apc_add_cultural_majority_modifier_effect = yes
			}
		}
		# ...but there's already another Cultural Majority
		else = {
			# SCENARIO 4: Add Cultural Majority modifier to the new Cultural Majority + Remove Cultural Majority modifier from the old Cultural Majority
			# Event
			random_country_culture = {
				limit = { z_apc_has_any_cultural_majority_modifier_trigger = yes }
				save_scope_as = z_apc_old_cultural_majority
			}
			random_country_culture = {
				limit = { this = root.country_culture }
				save_scope_as = z_apc_ruling_minority
			}
			trigger_event = z_apc_common.4
		}
	}
}

#-----------------------------------------------------------------------------------------
# Add Cultural Majority modifier
#-----------------------------------------------------------------------------------------
z_apc_add_cultural_majority_modifier_effect = {
	if = {
		limit = {
			exists = scope:z_apc_found_cultural_majority_in_country
			this = scope:z_apc_found_cultural_majority_in_country
		}
		add_country_culture_modifier = {
			name = z_apc_cultural_majority_in_country_modifier
			duration = -1
		}
	}
	else_if = {
		limit = {
			exists = scope:z_apc_found_cultural_majority_in_capital_region
			this = scope:z_apc_found_cultural_majority_in_capital_region
		}
		add_country_culture_modifier = {
			name = z_apc_cultural_majority_in_capital_region_modifier
			duration = -1
		}
	}
	else_if = {
		limit = {
			exists = scope:z_apc_found_cultural_majority_in_capital_area
			this = scope:z_apc_found_cultural_majority_in_capital_area
		}
		add_country_culture_modifier = {
			name = z_apc_cultural_majority_in_capital_area_modifier
			duration = -1
		}
	}
	else_if = {
		limit = {
			exists = scope:z_apc_found_cultural_majority_in_capital_city
			this = scope:z_apc_found_cultural_majority_in_capital_city
		}
		add_country_culture_modifier = {
			name = z_apc_cultural_majority_in_capital_city_modifier
			duration = -1
		}
	}
}

#-----------------------------------------------------------------------------------------
# Remove all Cultural Majority modifiers
#-----------------------------------------------------------------------------------------
z_apc_remove_all_cultural_majority_modifiers_effect = {
	if = {
		limit = { has_country_culture_modifier = z_apc_cultural_majority_in_country_modifier }
		remove_country_culture_modifier = z_apc_cultural_majority_in_country_modifier
	}
	if = {
		limit = { has_country_culture_modifier = z_apc_cultural_majority_in_capital_region_modifier }
		remove_country_culture_modifier = z_apc_cultural_majority_in_capital_region_modifier
	}
	if = {
		limit = { has_country_culture_modifier = z_apc_cultural_majority_in_capital_area_modifier }
		remove_country_culture_modifier = z_apc_cultural_majority_in_capital_area_modifier
	}
	if = {
		limit = { has_country_culture_modifier = z_apc_cultural_majority_in_capital_city_modifier }
		remove_country_culture_modifier = z_apc_cultural_majority_in_capital_city_modifier
	}
}

#-----------------------------------------------------------------------------------------
# Clear mission variables (on abort or completion)
#-----------------------------------------------------------------------------------------
z_apc_mission_clear_variables_effect = {
	if = {
		limit = { has_variable = z_apc_mission_ongoing }
		remove_variable = z_apc_mission_ongoing
	}
	if = {
		limit = { has_variable = z_apc_mission_ctp_current }
		remove_variable = z_apc_mission_ctp_current
	}
	if = {
		limit = { has_variable = z_apc_mission_already_integrated_citizens }
		remove_variable = z_apc_mission_already_integrated_citizens
	}
	if = {
		limit = { has_variable = z_apc_mission_already_integrated_nobles }
		remove_variable = z_apc_mission_already_integrated_nobles
	}
	if = {
		limit = { has_variable = z_apc_mission_assimilation_flag }
		remove_variable = z_apc_mission_assimilation_flag
	}
	if = {
		limit = { has_variable = z_apc_mission_replacement_flag }
		remove_variable = z_apc_mission_replacement_flag
	}
}

#-----------------------------------------------------------------------------------------
# Add 1 Cultural Transition point
#-----------------------------------------------------------------------------------------
z_apc_mission_add_ctp_effect = {
	if = {
		limit = { has_variable = z_apc_mission_ctp_current }
		change_variable = {
			name = z_apc_mission_ctp_current
			add = $VALUE$
		}
	}
	custom_tooltip = z_apc_mission_add_$VALUE$_ctp_effect_tt
}